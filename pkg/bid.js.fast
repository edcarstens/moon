//.#-*-Javascript-*-
//.+fast
FAST Feature: Bidding for MOON
------------------------------

//.bid = secjs.bid

//.def addBid():{
//.+index.block_content
//.+fast
/* ----- trick so emacs ignores this section -----
//.-fast
//.bids = ('PASS',4,5,6,7,'MOON')
//.y = (620,550,480,410,340,270)
//.for i in range(6):{
button#btnBid@i@(class="w3-button w3-white w3-hover-blue w3-text-black w3-card-4 w3-ripple" style='position:absolute; width:100px; height:50px; top:@y[i]@px; right:20px;' disabled) <b>@bids[i]@</b>
//.}
//.+fast
-- -----------------------------------------------
*/
//.-fast
//.-index.block_content

//.+moon.gotoLogin.body
for (let i=0; i<6; i++) {
    $('#btnBid' + i).hide()
}
//.-moon.gotoLogin.body

//.+moon.start1
for (let i=0; i<6; i++) {
    $('#btnBid' + i).on('click', () => {
	moon._bidClicked(i)
    })
}
//.-moon.start1

//.+moon.case("bid")
$('#message').html(`<b>State your bid</b>`)
$('#message').show()
let choices = [true] // pass is always a choice
let bid
console.log('Max bid is ' + data.maxBid)
for (let i=1; i<6; i++) {
    choices.push( (i > data.maxBid) )
}
if (data.maxBid == -2) {
    choices[0] = false // stuck bid
}
for (let choice in choices) {
    if (choices[choice]) {
	$('#btnBid' + choice).show()
	$('#btnBid' + choice).prop("disabled", false)
    }
    else {
	$('#btnBid' + choice).hide()
	$('#btnBid' + choice).prop("disabled", true)
    }
}
bid = await moon.bidClicked()
console.log('My bid is ' + bid)
moon.socket.emit('done', {bid})
for (let i=0; i<6; i++) {
    $('#btnBid' + i).hide()
}
$('#message').hide()
//.-moon.case

//.+gameServer.body
//.+gameServer.biddingRound()
a(
    room,
    idx,
) {
    let maxBid = -1
    let winner
    let data
    let i = 0
    for (let player of room.nextPlayer(idx)) {
        let socket = player.socket
        let nickName = player.nickName
        i++
        if ((i == 3) && (maxBid == 0)) {
	    console.log(`Player ${nickName} gets a stuck bid`)
	    maxBid = -2 // special code for stuck bid
        }
        data = {cmd:'bid', maxBid}
        let result = await this.playerTurn(player, data, 60)
        let bid = result.bid
        this.io.to(room.name).emit('bid', {player:nickName, bid})
        if (bid > maxBid) {
	    maxBid = bid
	    winner = player
        }
    }
    winner.bid = maxBid
    return winner
}
//.-gameServer.biddingRound
//.-gameServer.body

//.+moon.c.body
this._bidClicked = (bid) => bid
//.-moon.c.body

//.+moon.body
//.+moon.bidClicked()
a(
) {
    return new Promise( (resolve, reject) => {
        moon._bidClicked = (bid) => {
	    resolve(bid)
        }
    })
}
//.-moon.bidClicked
//.-moon.body

//.} # def addBid

//.-fast
