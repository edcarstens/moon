//.#-*-Javascript-*-
//.+fast
FAST Feature: Bidding for MOON
------------------------------

//.bid = secjs.bid

//.def addBid():{
//.+index.block_content
//.+fast
/* ----- trick so emacs ignores this section -----
//.-fast
//.bids = ('PASS',4,5,6,7,'MOON')
//.#y = (620,550,480,410,340,270)
//.y = 540
//.for i in range(6):{
button#btnBid@i@(class="w3-button w3-white w3-hover-blue w3-text-black w3-card-4 w3-ripple" style='position:absolute; width:100px; height:50px; top:@y@px; right:20px;' disabled) <b>@bids[i]@</b>
//.y -= 60
//.}
//.+fast
-- -----------------------------------------------
*/
//.-fast
//.-index.block_content

//.+moon.gotoLogin.body
for (let i=0; i<6; i++) {
    $('#btnBid' + i).hide()
}
//.-moon.gotoLogin.body

//.+moon.c.body
this._bidClicked = (bid) => bid
//.-moon.c.body

//.+moon.start1
for (let i=0; i<6; i++) {
    $('#btnBid' + i).on('click', () => {
	moon._bidClicked(i)
    })
}
//.-moon.start1

//.+moon.body

//.+moon.bidClickedOrBot()
a(
) {
    let p1 = new Promise( resolve => {
         moon._bidClicked = (bid) => {
	     resolve({bid, status:'DONE'})
        }
    })
    let p2 = new Promise( resolve => {
        moon.socket.once('moonbot', result => {
            resolve(result)
        })
    })
    return Promise.race([p1,p2])
}
//.-moon.bidClickedOrBot

//.-moon.body

//.+moon.case("bid")
$('#message').html(`<b>Choose your bid</b>`)
$('#message').show()
let choices = [true] // pass is always a choice
let bid
let result
console.log('Max bid is ' + data.maxBid)
for (let i=1; i<6; i++) {
    choices.push( (i > data.maxBid) )
}
if (data.maxBid == -2) {
    choices[0] = false // stuck bid
}
for (let choice in choices) {
    if (choices[choice]) {
	$('#btnBid' + choice).show()
	$('#btnBid' + choice).prop("disabled", false)
    }
    else {
	$('#btnBid' + choice).hide()
	$('#btnBid' + choice).prop("disabled", true)
    }
}
result = await moon.bidClickedOrBot()
bid = result.bid
console.log('My bid is ' + bid)
if (result.status == 'DONE') {
    moon.socket.emit('done', {bid})
}
for (let i=0; i<6; i++) {
    $('#btnBid' + i).hide()
}
$('#message').hide()
//.-moon.case

//.+moon.body
//.+moon.cvtBid()
(
    bid,
) {
    let s = bid + 3
    if (bid == 5) {
	s = 'MOON'
    }
    if (bid == 0) {
	s = 'PASS'
    }
    return s
}
//.-moon.cvtBid
//.+moon.displayBid()
(
    bid,
) {
    let s = this.cvtBid(bid)
    $('#bid').html(`<b> BID: ${s} </b>`)
    $('#bid').show()
}
//.-moon.displayBid
//.-moon.body

//.+gameServer.body
//.+gameServer.biddingRound()
a(
    room,
    idx,
) {
    let maxBid = -1
    let winner
    let data
    let i = 0
    for (let player of room.nextPlayer(idx)) {
        let socket = player.socket
        let nickName = player.nickName
        i++
        if ((i == 3) && (maxBid == 0)) {
	    console.log(`Player ${nickName} gets a stuck bid`)
	    maxBid = -2 // special code for stuck bid
        }
        data = {cmd:'bid', maxBid}
        let result = await this.playerTurn(room, player, data, 60)
        let bid = result.bid
        this.io.to(room.name).emit('bid', {player:nickName, bid, won:false})
        if (bid > maxBid) {
	    maxBid = bid
	    winner = player
        }
    }
    winner.bid = maxBid
    return winner
}
//.-gameServer.biddingRound
//.-gameServer.body

//.} # def addBid

//.-fast
