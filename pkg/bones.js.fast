//.#-*-Javascript-*-
//.+fast
FAST Template for bones.js
--------------------------

//.bones = secjs.bones('public/javascripts/bones.js')

//.def addBones():{
Adding bones ..
//.nbones = 22
//.+layout.scripts
script(src='javascripts/bones.js')
//.  bones.bonepool = (  # complete pool of 22 dominoes for MOON (const)
//.    '00', # '01','02','03','04','05','06',
//.    '11','12','13','14','15','16',
//.    '22','23','24','25','26',
//.    '33','34','35','36',
//.    '44','45','46',
//.    '55','56',
//.    '66'
//.  )
//.# 22 = 3+5+6+5+3
//.  domw = 90  ## hidden domino width
//.  domh = 40  ## hidden domino height
//.  x0 = 10
//.  y0 = 170
//.  xd = domw + 10
//.  yd = domh + 10
//.  x00 = x0 + xd/2
//.  x = (    x00+xd,x00+2*xd,x00+3*xd,
//.       x00,x00+xd,x00+2*xd,x00+3*xd,x00+4*xd,
//.     x0,x0+xd,x0+2*xd,x0+3*xd,x0+4*xd,x0+5*xd,
//.       x00,x00+xd,x00+2*xd,x00+3*xd,x00+4*xd,
//.           x00+xd,x00+2*xd,x00+3*xd
//.  )
//.  y = (    y0,y0,y0,
//.       y0+yd,y0+yd,y0+yd,y0+yd,y0+yd,
//.    y0+2*yd,y0+2*yd,y0+2*yd,y0+2*yd,y0+2*yd,y0+2*yd,
//.       y0+3*yd,y0+3*yd,y0+3*yd,y0+3*yd,y0+3*yd,
//.           y0+4*yd,y0+4*yd,y0+4*yd
//.  )
//.  for i in range(nbones):{
//.   +bones.x_coords
@x[i]@,
//.   -bones.x_coords
//.   +bones.y_coords
@y[i]@,
//.   -bones.y_coords
//.  }
//.-layout.scripts

//.+index.block_content
//.+fast
/*
//.-fast
//.  for i in range(nbones):{
button#btnBone@i@(class="w3-button w3-white w3-hover-green w3-text-black w3-card-4 w3-ripple" style='position:absolute; width:@domw@px; height:@domh@px; top:@y[i]@px; left:@x[i]@px;' disabled) <i>MOON</i>
img#tile@bones.bonepool[i]@(src="images/@bones.bonepool[i]@.jpg" class="w3-button" style="position:absolute; width:120px; height:60px; top:@y[i]@px; left:@x[i]@px;")
//.  }
h1#message(class="w3-center w3-card-4 w3-yellow w3-text-black w3-round-xxlarge w3-animate-fading" style='position:absolute; top:620px; left:200px; width:400px') <b>Welcome to MOON</b>
table#stats(class="w3-center w3-card-4 w3-light-blue w3-text-black w3-round-xxlarge" style='position:absolute; top:20px; right:40px; width:600px') <tr><th>Name</th><th>Wins</th><th>Score</th><th>Tricks</th></tr>
h2#trump(class="w3-center w3-card-4 w3-light-blue w3-text-black w3-round-xxlarge" style='position:absolute; bottom:260px; right:40px; width:300px') <b> TRUMP: - </b> 
h2#suit(class="w3-center w3-card-4 w3-light-blue w3-text-black w3-round-xxlarge" style='position:absolute; bottom:200px; right:40px; width:300px') <b> SUIT: - </b> 
//.+fast
*/
//.-fast
//.-index.block_content

//.+gameServer.constructor.body
this.bonepoolMoon = [  // complete pool of 22 dominoes for MOON (const)
    '00', // '01','02','03','04','05','06',
    '11','12','13','14','15','16',
    '22','23','24','25','26',
    '33','34','35','36',
    '44','45','46',
    '55','56',
    '66'
]
this.bonepool = [] // dynamic pool (var)
this.replaceSocketMap = new Map()
//.-gameServer.constructor.body

//.+gameServer.shuffle.let
/**
 * Randomly shuffle an array
 * https://stackoverflow.com/a/2450976/1293256
 * @@param  {Array} array The array to shuffle
 * @@return {String}      The first item in the shuffled array
 */
var currentIndex = array.length
var temporaryValue, randomIndex
//.-gameServer.shuffle.let

//.+gameServer.body
//.+gameServer.shuffle()
(
    array,
) {
    //.gameServer.shuffle.let > ''
    // While there remain elements to shuffle...
    while (0 !== currentIndex) {
        // Pick a remaining element...
        randomIndex = Math.floor(Math.random() * currentIndex)
        currentIndex -= 1
        
        // And swap it with the current element.
        temporaryValue = array[currentIndex]
        array[currentIndex] = array[randomIndex]
        array[randomIndex] = temporaryValue
    }
    return array
}
//.-gameServer.shuffle

//.+gameServer.findKitty()
a(
    socketId,
) {
    for (let bone of this.bonepool) {
        if (!bone.faceup) {
            console.log(bone)
            bone.owner = socketId
            bone.faceup = true
            return bone
        }
    } // for
    // TODO: raise or throw an error here
}
//.-gameServer.findKitty

//.+gameServer.sendBone()
(
    boneId,
) {
    let bone = this.bonepool[boneId]
    let rv = {
        faceup: bone.faceup,
        owner: bone.owner,
        trick: bone.trick,
        boneStr: bone.boneStr,
        played: bone.played,
        discarded: bone.discarded
    }
    return rv
}
//.-gameServer.sendBone

//.+gameServer.sendBonePool()
(
    socketId="",
    first=true,
) {
    let bone
    let nvalid = 0
    if (first) {
        console.log('Calculating valid first plays..')
        for (bone of this.bonepool) {
            if ((bone.owner == socketId) && (! bone.trick)) {
                console.log(`Bone ${bone.boneStr} is valid`)
                bone.valid = true
                bone.trump = this.call
            }
            else {
                bone.valid = false
            }
        }
    }
    else {
        console.log('Calculating valid plays..')
        for (bone of this.bonepool) {
            bone.trump = this.call
            if ((bone.owner == socketId) && (! bone.trick)) {
                console.log('Bone ' + bone.boneStr)
                if (bone.trump == this.suit) {
                    if (bone.suits[this.suit]) {
                        bone.valid = true
                        nvalid++
                        console.log('This one follows the trump suit.')
                    }
                    else {
                        bone.valid = false
                    }
                }
                else if (bone.suits[this.suit] && ((bone.trump == 8) || (! bone.suits[bone.trump]))) {
                    bone.valid = true
                    nvalid++
                    console.log('This one follows suit.')
                }
                else {
                    bone.valid = false
                }
            }
            else {
                bone.valid = false
            }
        }
        if (! nvalid) {
            for (bone of this.bonepool) {
                if ((bone.owner == socketId) && (! bone.trick)) {
                    bone.valid = true
                }
            }
        }
    }
    return this.bonepool.map((x) => {
        let rv = {
            faceup: x.faceup,
            owner: x.owner,
            trick: x.trick,
            boneStr: x.boneStr,
            played: x.played,
            discarded: x.discarded,
            trump: x.trump,
            valid: x.valid
        }
        // hide owner if face down or not owned by you
        if (!rv.faceup) {
            rv.owner = ''
        }
        else if (x.owner && (x.owner != socketId)) {
            rv.owner = '-'
            rv.boneStr = ''
        }
        return rv
    })
}
//.-gameServer.sendBonePool

//.+gameServer._remapSocketId()
(
) {
    for (let bone of this.bonepool) {
        if (this.replaceSocketMap.has(bone.owner)) {
            bone.owner = this.replaceSocketMap.get(bone.owner)
        }
    }
}
//.-gameServer._remapSocketId

//.+gameServer.remapSocketId()
(
    oldSocketId,
    newSocketId,
) {
    this.replaceSocketMap.set(oldSocketId, newSocketId)
}
//.-gameServer.remapSocketId

//.+gameServer.shakeBones()
(
    seed=@nbones@,
) {
    console.log(`Applying random seed, ${seed}, to inject randomness`)
    let s = 0
    for (let i=0; i<((seed % 32)+1); i++) {
        s += Math.random()
    }
    this.bonepool = this.shuffle(this.bonepoolMoon.slice()) // copy and shuffle
    for (let i in this.bonepool) {
        //bone.faceup = false
        //bone.owner = ''
        this.bonepool[+i].faceup = false
        this.bonepool[+i].owner = ''
        this.bonepool[+i].trick = 0
        this.bonepool[+i].played = false 
        this.bonepool[+i].discarded = false 
        //this.bonepool[+i].boneStr = ''
    }
    return 0
}
//.-gameServer.shakeBones
//.-gameServer.body

//.+gameServer.constructor.body
// Convert bone strings to bone objects
this.bonepoolMoon = this.bonepoolMoon.map((x) => new boneClass(x))
this.shakeBones()
//.-gameServer.constructor.body

//.+moon.gotoLogin.body
//.  for i in range(nbones):{
$('#btnBone@i@').hide();
$('#tile@bones.bonepool[i]@').hide()
//.  }
//.-moon.gotoLogin.body

//.+moon.start1
//.  for i in range(nbones):{
$('#btnBone@i@').show();
$('#tile@bones.bonepool[i]@').hide()
//.  }
//.-moon.start1

//.+moon.c.body
this._boneClicked = (boneId) => boneId
this.clickBoneId = {}
//.-moon.c.body

//.+bones
//. for i in range(nbones):{
$('#btnBone@i@').on('click', function() {
    $('#btnBone@i@').hide()
    moon._boneClicked(@i@)
})
//$('#tile@bones.bonepool[i]@').on('click', () => {
//    $('#tile@bones.bonepool[i]@').hide()
//    moon._boneClicked(@i@)
//})
//. }
class bonesClass {
    //.+bones.c()
    (
    ) {
        this.pool = []   // array of shuffled dominoes
        this.bonepoolMoon = [  // complete pool of 22 dominoes for MOON (const)
            '00', // '01','02','03','04','05','06',
            '11','12','13','14','15','16',
            '22','23','24','25','26',
            '33','34','35','36',
            '44','45','46',
            '55','56',
            '66'
        ]
        this.x = [
            //.bones.chomp > 'x_coords'
        ]
        this.y = [
            //.bones.chomp > 'y_coords'
        ]       
        this.faceup = {}
        let bone = {faceup:false, owner:'', boneStr:''}
        for (let i=0; i<this.bonepoolMoon.length; i++) {
            this.pool.push(bone)
            this.faceup[this.bonepoolMoon[i]] = false
            $('#tile' + this.bonepoolMoon[i]).on('click', () => {
                moon._boneClicked(moon.clickBoneId[this.bonepoolMoon[i]])
            })
        }
    }
    //.-bones.c

    //.+bones.display()
    (
        enabled,
    ) {
        for (let k in this.faceup) {
            this.faceup[k] = false
        }
	let yhand = 460
	let xhand = 220
        let x = xhand
        let y = yhand
        let x2 = 0 // showing tricks played in the past
        let y2 = [0,160,160,160,160,160,160,160]
        let y3 = 160 // showing dominos played for current trick
        for (let i=0; i<this.pool.length; i++) {
            let bone = this.pool[i]
            if (bone.faceup) {
                $('#btnBone' + i).hide()
                $('#btnBone' + i).prop("disabled",true)
                if (bone.owner == '') {
                    this.faceup[bone.boneStr] = true
                    if (bone.played) {
                        $('#tile' + bone.boneStr).css("left",700)
                        $('#tile' + bone.boneStr).css("top",y3)
                        y3 += 60
                    }
                    else {
                        $('#tile' + bone.boneStr).css("left",$('#btnBone' + i).css("left"))
                        $('#tile' + bone.boneStr).css("top",$('#btnBone' + i).css("top"))
                    }
                    moon.clickBoneId[bone.boneStr] = -3 // signals illegal play
                }
                else if (bone.owner == moon.socket.id) {
                    //console.log(`${bone.boneStr} matches owner`)
                    //console.log(bone.owner)
                    //console.log(moon.socket.id)
                    this.faceup[bone.boneStr] = true
                    if (bone.trick) {
                        $('#tile' + bone.boneStr).css("left",x2 + bone.trick*100)
                        $('#tile' + bone.boneStr).css("top",y2[bone.trick])
                        y2[bone.trick] += 60
                        moon.clickBoneId[bone.boneStr] = -2 // signals illegal play
                    }
                    else {
                        $('#tile' + bone.boneStr).css("left",x)
                        $('#tile' + bone.boneStr).css("top",y)
                        if (bone.valid) {
                            moon.clickBoneId[bone.boneStr] = i
                            $('#tile' + bone.boneStr).show()
                        }
                        else {
                            moon.clickBoneId[bone.boneStr] = -1 // signals illegal play
                        }
                        x += 110
                        if ((y == yhand) && (x > xhand + 2*110)) {
                            x = xhand - 60
                            y += 60
                        }
                    }
                }
            }
            else {
                if (bone.discarded) {
                    $('#btnBone' + i).show()
                    $('#btnBone' + i).prop("disabled",true)
                    $('#btnBone' + i).css("left", 700)
                    $('#btnBone' + i).css("top", 400)   
                }
                else {
                    $('#btnBone' + i).show()
                    $('#btnBone' + i).prop("disabled",!enabled)
                    $('#btnBone' + i).css("left", this.x[i])
                    $('#btnBone' + i).css("top", this.y[i])
                }
            }
        }
        for (let k in this.faceup) {
            if (this.faceup[k]) {
                $('#tile' + k).show()
            }
            else {
                $('#tile' + k).hide()
            }
        }
    }
    //.-bones.display

    //.bones > 'body'

} // class
var bones = new bonesClass()
//.-bones
//.} # def addBones

//.-fast
