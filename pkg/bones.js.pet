//.#-*-Javascript-*-
//.+pet
PET Template for bones.js
-------------------------

//.class bonesClass(templatejs):{
//. nbones = 22
//. def add(self, layout, index, gameServer, moon):{
//.  layout < 'scripts'
script(src='javascripts/bones.js')
//.# 22 = 3+5+6+5+3
//.  x = (320,440,560,
//.       200,320,440,560,680,
//.       140,260,380,500,620,740,
//.       200,320,440,560,680,
//.       320,440,560
//.  )
//.  y = (270,270,270,
//.       340,340,340,340,340,
//.       410,410,410,410,410,410,
//.       480,480,480,480,480,
//.       550,550,550
//.  )
//.  for i in range(self.nbones):{
//.   self < 'x coords'
@x[i]@,
//.   self < 'y coords'
@y[i]@,
//.  }
//.  self.bonepool = (  # complete pool of 22 dominoes for MOON (const)
//.    '00', # '01','02','03','04','05','06',
//.    '11','12','13','14','15','16',
//.    '22','23','24','25','26',
//.    '33','34','35','36',
//.    '44','45','46',
//.    '55','56',
//.    '66'
//.  )
//.  index < 'block content'
//.+pet
/*  This line is not output, but it does tell emacs to ignore the pug code below
//.-pet
//.  for i in range(self.nbones):{
button#btnBone@i@(class="w3-button w3-white w3-hover-green w3-text-black w3-card-4 w3-ripple" style='position:absolute; width:100px; height:50px; top:@y[i]@px; left:@x[i]@px;' disabled) <i>MOON</i>
img#tile@self.bonepool[i]@(src="images/@self.bonepool[i]@.jpg" class="w3-button" style="position:absolute; width:120px; height:60px; top:@y[i]@px; left:@x[i]@px;")
//.  }
h1#message(class="w3-center w3-card-4 w3-yellow w3-text-black w3-round-xxlarge w3-animate-fading" style='position:absolute; top:620px; left:300px; width:400px') <b>Welcome to MOON</b>
table#stats(class="w3-center w3-card-4 w3-light-blue w3-text-black w3-round-xxlarge" style='position:absolute; top:20px; right:40px; width:600px') <tr><th>Name</th><th>Wins</th><th>Score</th><th>Tricks</th></tr>
h2#trump(class="w3-center w3-card-4 w3-light-blue w3-text-black w3-round-xxlarge" style='position:absolute; bottom:260px; right:40px; width:300px') <b> TRUMP: - </b> 
h2#suit(class="w3-center w3-card-4 w3-light-blue w3-text-black w3-round-xxlarge" style='position:absolute; bottom:200px; right:40px; width:300px') <b> SUIT: - </b> 
//.+pet
*/  // This line is not output, but it does tell emacs to ignore the pug code above
//.-pet


//.gameServer < 'constructor body'
this.bonepoolMoon = [  // complete pool of 22 dominoes for MOON (const)
    '00', // '01','02','03','04','05','06',
    '11','12','13','14','15','16',
    '22','23','24','25','26',
    '33','34','35','36',
    '44','45','46',
    '55','56',
    '66'
]
this.bonepool = [] // dynamic pool (var)
this.replaceSocketMap = new Map()
//.gameServer < 'shuffle let'
/**
 * Randomly shuffle an array
 * https://stackoverflow.com/a/2450976/1293256
 * @@param  {Array} array The array to shuffle
 * @@return {String}      The first item in the shuffled array
 */
var currentIndex = array.length
var temporaryValue, randomIndex
//.gameServer < 'body'
//.+gameServer.method('shuffle', 'array')
// While there remain elements to shuffle...
while (0 !== currentIndex) {
	// Pick a remaining element...
	randomIndex = Math.floor(Math.random() * currentIndex)
	currentIndex -= 1

	// And swap it with the current element.
	temporaryValue = array[currentIndex]
	array[currentIndex] = array[randomIndex]
	array[randomIndex] = temporaryValue
}
return array
//.-gameServer.method

//.+gameServer.amethod('findKitty', 'socketId')
for (let bone of this.bonepool) {
    if (!bone.faceup) {
	console.log(bone)
	bone.owner = socketId
	bone.faceup = true
	return bone
    }
}
// TODO: raise or throw an error here
//.-gameServer.amethod('kitty')

//.+gameServer.method('sendBone','boneId')
let bone = this.bonepool[boneId]
let rv = {
    faceup: bone.faceup,
    owner: bone.owner,
    trick: bone.trick,
    boneStr: bone.boneStr,
    played: bone.played,
    discarded: bone.discarded
}
//.-gameServer.method('rv')

//.+gameServer.method('sendBonePool','socketId=""', 'first=true')
let bone
let nvalid = 0
if (first) {
    console.log('Calculating valid first plays..')
    for (bone of this.bonepool) {
	if ((bone.owner == socketId) && (! bone.trick)) {
	    console.log(`Bone ${bone.boneStr} is valid`)
	    bone.valid = true
	    bone.trump = this.call
	}
	else {
	    bone.valid = false
	}
    }
}
else {
    console.log('Calculating valid plays..')
    for (bone of this.bonepool) {
	bone.trump = this.call
	if ((bone.owner == socketId) && (! bone.trick)) {
	    console.log('Bone ' + bone.boneStr)
	    if (bone.trump == this.suit) {
		if (bone.suits[this.suit]) {
		    bone.valid = true
		    nvalid++
		    console.log('This one follows the trump suit.')
		}
		else {
		    bone.valid = false
		}
	    }
	    else if (bone.suits[this.suit] && ((bone.trump == 8) || (! bone.suits[bone.trump]))) {
		bone.valid = true
		nvalid++
		console.log('This one follows suit.')
	    }
	    else {
		bone.valid = false
	    }
	}
	else {
	    bone.valid = false
	}
    }
    if (! nvalid) {
	for (bone of this.bonepool) {
	    if ((bone.owner == socketId) && (! bone.trick)) {
		bone.valid = true
	    }
	}
    }
}
return this.bonepool.map((x) => {
    let rv = {
	faceup: x.faceup,
	owner: x.owner,
	trick: x.trick,
	boneStr: x.boneStr,
	played: x.played,
	discarded: x.discarded,
	trump: x.trump,
	valid: x.valid
    }
    // hide owner if face down or not owned by you
    if (!rv.faceup) {
	rv.owner = ''
    }
    else if (x.owner && (x.owner != socketId)) {
	rv.owner = '-'
	rv.boneStr = ''
    }
    return rv
})
//.-gameServer.method
//.+gameServer.method('_remapSocketId')
for (let bone of this.bonepool) {
    if (this.replaceSocketMap.has(bone.owner)) {
	bone.owner = this.replaceSocketMap.get(bone.owner)
    }
}
//.-gameServer.method
//.+gameServer.method('remapSocketId', 'oldSocketId', 'newSocketId')
this.replaceSocketMap.set(oldSocketId, newSocketId)
//.-gameServer.method
//.+gameServer.method('shakeBones', 'seed=22')
console.log(`Applying random seed, ${seed}, to inject randomness`)
let s = 0
for (let i=0; i<((seed % 32)+1); i++) {
    s += Math.random()
}
this.bonepool = this.shuffle(this.bonepoolMoon.slice()) // copy and shuffle
for (let i in this.bonepool) {
    //bone.faceup = false
    //bone.owner = ''
    this.bonepool[+i].faceup = false
    this.bonepool[+i].owner = ''
    this.bonepool[+i].trick = 0
    this.bonepool[+i].played = false 
    this.bonepool[+i].discarded = false 
    //this.bonepool[+i].boneStr = ''
}
//.-gameServer.method(0)

//.gameServer < 'constructor body'
// Convert bone strings to bone objects
this.bonepoolMoon = this.bonepoolMoon.map((x) => new boneClass(x))
this.shakeBones()

//.  moon < 'gotoLogin body'
//.  for i in range(self.nbones):{
$('#btnBone@i@').hide();
$('#tile@self.bonepool[i]@').hide()
//.  }
//.  moon < 'start1'
//.  for i in range(self.nbones):{
$('#btnBone@i@').show();
$('#tile@self.bonepool[i]@').hide()
//.  }
//.  moon < 'classvars'
_boneClicked: (boneId) => boneId,
clickBoneId: {},
//. }

//. def output(self):{
//. for i in range(self.nbones):{
$('#btnBone@i@').on('click', function() {
    $('#btnBone@i@').hide()
    moon._boneClicked(@i@)
})
//$('#tile@self.bonepool[i]@').on('click', () => {
//    $('#tile@self.bonepool[i]@').hide()
//    moon._boneClicked(@i@)
//})
//. }

class bonesClass {
    //.+self.init()
    this.pool = []   // array of shuffled dominoes
    this.bonepoolMoon = [  // complete pool of 22 dominoes for MOON (const)
	'00', // '01','02','03','04','05','06',
	'11','12','13','14','15','16',
	'22','23','24','25','26',
	'33','34','35','36',
	'44','45','46',
	'55','56',
	'66'
    ]
    this.x = [
	//.self.chomp > 'x coords'
    ]
    this.y = [
	//.self.chomp > 'y coords'
    ]	
    this.faceup = {}
    let bone = {faceup:false, owner:'', boneStr:''}
    for (let i=0; i<this.bonepoolMoon.length; i++) {
	this.pool.push(bone)
	this.faceup[this.bonepoolMoon[i]] = false
	$('#tile' + this.bonepoolMoon[i]).on('click', () => {
	    moon._boneClicked(moon.clickBoneId[this.bonepoolMoon[i]])
	})
    }
    //.-self.init

    //.+self.method('display', 'enabled')
    for (let k in this.faceup) {
	this.faceup[k] = false
    }
    let x = 320
    let y = 720
    let x2 = 0
    let y2 = [0,160,160,160,160,160,160,160]
    let y3 = 400
    for (let i=0; i<this.pool.length; i++) {
	let bone = this.pool[i]
	if (bone.faceup) {
	    $('#btnBone' + i).hide()
	    $('#btnBone' + i).prop("disabled",true)
	    if (bone.owner == '') {
		this.faceup[bone.boneStr] = true
		if (bone.played) {
		    $('#tile' + bone.boneStr).css("left",400)
		    $('#tile' + bone.boneStr).css("top",y3)
		    y3 += 60
		}
		else {
		    $('#tile' + bone.boneStr).css("left",$('#btnBone' + i).css("left"))
		    $('#tile' + bone.boneStr).css("top",$('#btnBone' + i).css("top"))
		}
		moon.clickBoneId[bone.boneStr] = -3 // signals illegal play
	    }
	    else if (bone.owner == moon.socket.id) {
		//console.log(`${bone.boneStr} matches owner`)
		//console.log(bone.owner)
		//console.log(moon.socket.id)
		this.faceup[bone.boneStr] = true
		if (bone.trick) {
		    $('#tile' + bone.boneStr).css("left",x2 + bone.trick*100)
		    $('#tile' + bone.boneStr).css("top",y2[bone.trick])
		    y2[bone.trick] += 60
		    moon.clickBoneId[bone.boneStr] = -2 // signals illegal play
		}
		else {
		    $('#tile' + bone.boneStr).css("left",x)
		    $('#tile' + bone.boneStr).css("top",y)
		    if (bone.valid) {
			moon.clickBoneId[bone.boneStr] = i
			$('#tile' + bone.boneStr).show()
		    }
		    else {
			moon.clickBoneId[bone.boneStr] = -1 // signals illegal play
		    }
		    x += 120
		    if ((y == 720) && (x > 560)) {
			x = 260
			y += 70
		    }
		}
	    }
	}
	else {
	    if (bone.discarded) {
		$('#btnBone' + i).show()
		$('#btnBone' + i).prop("disabled",true)
		$('#btnBone' + i).css("left", 700)
		$('#btnBone' + i).css("top", 400)	
	    }
	    else {
		$('#btnBone' + i).show()
		$('#btnBone' + i).prop("disabled",!enabled)
		$('#btnBone' + i).css("left", this.x[i])
		$('#btnBone' + i).css("top", this.y[i])
	    }
	}
    }
    for (let k in this.faceup) {
	if (this.faceup[k]) {
	    $('#tile' + k).show()
	}
	else {
	    $('#tile' + k).hide()
	}
    }
    //.-self.method;

    //.self > 'body'
}
var bones = new bonesClass()
//. } # def output(self)
//.}

//.bones = bonesClass('public/javascripts/bones.js','')

//.-pet
