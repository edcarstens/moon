//.#-*-Javascript-*-
//.+pet
PET Template for gameServer.js
------------------------------

//.class gameServerClass(templatejs):{
//. def add(self, mainServer, moon):{
//.  mainServer < 'body'
//gameServer.init(io); // ?
//gameServer.start();  // ?
//. }
//. def output(self):{
let boneClass = require('./boneClass')
class gameServerClass {
    //.+self.init('io', 'room', 'players')
    console.log('moon game server initializing..');
    this.halt = false
    //.-self.init

    //.+self.method('start')
    let io = this.io;
    console.log('moon game server starting..');
    // Never use 'this' keyword in callbacks
    //.-self.method

    //.+self.amethod('emitUntilAckOrTimeout', 'player', 'data')
    let p1 = new Promise( resolve => {
	console.log(`Emitting yourturn event to client ${player.nickName} with {${data.cmd} ..`)
	data.status = 'ACK'
	player.socket.emit('yourturn', data, resolve)
    })
    let p2 = new Promise( resolve => {
	setTimeout(resolve, 1000, {status:'RETRY'})
    })
    let p3 = new Promise( resolve => {
	this.haltGame = resolve
    })
    let p = Promise.race([p1,p2,p3])
    //.-self.amethod('p')

    //.+self.amethod('emitUntilAck', 'player', 'data')
    let result = {status:'RETRY'}
    let retries = 3
    while (retries && (result.status == 'RETRY')) {
	result = await this.emitUntilAckOrTimeout(player, data)
	retries--
    }
    if (result.status == 'RETRY') {
	console.log(`Player ${player.nickName} lost connection`)
    }
    //.-self.amethod('result')

    //.+self.amethod('getPlayerResponse', 'player', 'timeout')
    let p1 = new Promise( (resolve, reject) => {
	player.socket.once('done', (data) => {
	    data.status = 'DONE'
	    resolve(data)
	})
    })
    let p2 = new Promise( resolve => {
	setTimeout(resolve, 1000*timeout, {status:'TIMED OUT'})
    })
    let p3 = new Promise( resolve => {
	this.haltGame = resolve
    })
    let p = Promise.race([p1,p2,p3])
    //.-self.amethod('p')

    //.+self.amethod('playerTurn', 'player', 'data', 'timeout')
    let socket = player.socket
    let nickName = player.nickName
    let result
    console.log(`It is player ${nickName} turn`)
    if (nickName == 'moonbot') {
	result = await this.moonBot(data)
    }
    else {
	result = await this.emitUntilAck(player, data)
	if (result.status == 'ACK') {
	    result = await this.getPlayerResponse(player, timeout)
	    if (result.status != 'DONE') { // timed out waiting for response
		console.log(`MoonBot playing for ${nickName} ..`)
		result = await this.moonBot(data)
		socket.emit('moonbot', result)
	    }
	}
	else { // timed out waiting for ACK
	    console.log(`MoonBot playing for ${nickName} ..`)
	    result = await this.moonBot(data)
	}
    }
    //.-self.amethod('result')
    
    //.+self.amethod('drawForShake', 'room')
    let winners = room.round()
    // Short circuit this for faster development..
    return winners[0]
    while (winners.length != 1) {
	let maxBone = new boneClass("00") // set to lowest domino (double blank)
	let nextWinners = []
	for (let player of winners) {
	    let socket = player.socket
	    let data = {cmd:'draw', bones:this.sendBonePool(socket.id)}
	    let result = await this.playerTurn(player, data, 5)
	    let boneId = result.boneId
	    let bone = this.bonepool[boneId]
	    bone.faceup = true
	    bone.owner = ''
	    this.io.to(room.name).emit('drewbone', {player:nickName, boneId:boneId, boneStr:bone.boneStr})
	    if (@self.bone > self.maxBone@) {
		maxBone = bone
		nextWinners = [player]
		console.log(nickName)
	    }
	    else if (@self.bone == self.maxBone@) {
		nextWinners.push(player)
		console.log('tie')
	    }
	}
	winners = nextWinners
    }
    //.-self.amethod('winners[0]')

    //.+self.method('ack', 'data')
    console.log(`client has acknowledged it is his turn by returning..`)
    console.log(data)
    //.-self.method
    
    //.+self.amethod('trick', 'room', 'players')
    let first = true
    let maxBone = null
    let winner
    let bones = []
    this.suit = -1
    for (let player of players) {
	let socket = player.socket
	let pool = await this.sendBonePool(socket.id, first)
	let stats = await this.getStats(players)
	let result = await this.playerTurn(player, {cmd:'play', bones:pool, stats:stats, maxBone:maxBone, trump:this.call}, 20)
	let {boneId} = result
	let bone = this.bonepool[boneId]
	bone.played = true
	bone.faceup = true
	bone.owner = ''
	bones.push(bone)
	if (first) {
	    if ((bone.lo == bone.trump) || (bone.hi == bone.trump)) {
		bone.suit = bone.trump
	    }
	    else if ((bone.trump == 7) && (bone.lo == bone.hi)) {
		bone.suit = bone.trump
	    }
	    else {
		bone.suit = bone.hi
	    }
	    console.log(`suit = ${bone.suit}`)
	    this.suit = bone.suit
	    maxBone = bone
	    winner = player
	    first = false
	}
	else {
	    bone.suit = this.suit
	    if (@self.bone > self.maxBone@) {
		maxBone = bone
		winner = player
	    }
	}
	console.log('bone.value = ' + bone.value())
	this.io.to(room.name).emit('state', {socketId:socket.id, player:player.nickName, boneId:boneId, bone:this.sendBone(boneId)})
    }
    winner.tricks++
    for (let bone of bones) {
	bone.trick = winner.tricks
	bone.owner = winner.socket.id
    }
    //.-self.amethod('winner')

    //.+self.method('getStats', 'players')
    let stats = {}
    let player
    let socketIds = []
    for (player of players) {
	socketIds.push(player.socket.id)
	stats[player.socket.id] = {
	    'name': player.nickName,
	    'wins': player.wins,
	    'score': player.score,
	    'tricks': player.tricks
	}
    }
    stats['socketIds'] = socketIds
    //.-self.method('stats')
    
    //.+self.amethod('firstValidPlay', 'bones')
    let i = 0
    for (let bone of bones) {
	if (bone.valid) {
	    return i
	}
	i++
    }
    //.-self.amethod(0)

    //.+self.amethod('bestValidPlay', 'data')
    let i = 0
    let plays = []
    let {bones, maxBone} = data
    let bone
    let nvalid = 0
    for (let _bone of bones) {
	if (_bone.valid) {
	    nvalid += 1
	    plays.push(i)
	    bone = this.bonepool[i] // get the real bone
	    bone.suit = this.suit
	    // Play the first winner you see
	    if (maxBone && (@self.bone > self.maxBone@)) {
		return i
	    }
	}
	i++
    }
    if (plays.length == 1) {
	// Only one valid play
	return plays[0]
    }
    if (! maxBone) {
	// Since I am leading, play a double if I have it
	for (let play of plays) {
	    bone = this.bonepool[play]
	    if (bone.suits[7]) {
		return play // stop at first double
	    }
	}
	// Otherwise, play first valid one
	return plays[0]
    }

    if (plays.length == nvalid) {
	// If no bones remaining in hand follow suit,
	// play a small non-double or small double..
	let minValue = 999
	let value
	let minPlay
	for (let play of plays) {
	    bone = this.bonepool[play]
	    value = bone.lo + bone.hi
	    value += ((bone.lo == bone.hi) && (bone.lo > 2))*100
	    if (value < minValue) {
		minValue = value
		minPlay = play
	    }
	}
	return minPlay
    }
    
    // If there are more than one losing plays,
    // play the lowest one.
    let minPlay = plays[0]
    let minBone = this.bonepool[minPlay]
    for (let play of plays) {
	bone = this.bonepool[play]
	if (@self.bone < self.minBone@) {
	    minBone = bone
	    minPlay = play
	}
    }
    return minPlay
    //.-self.amethod

    //.+self.amethod('firstFacedown', 'bones')
    let i = 0
    for (let bone of bones) {
	if (! bone.faceup) {
	    return i
	}
	i++
    }
    //.-self.amethod(0)
    
    //.+self.amethod('firstFacedown7', 'bones')
    let i = 0
    let rv = []
    for (let bone of bones) {
	if (! bone.faceup) {
	    rv.push(i)
	    if (rv.length == 7) {
		return rv
	    }
	}
	i++
    }
    console.log(`firstFacedown7: ERROR - Not enough facedown bones, only found ${rv.length}`)
    //.-self.amethod('rv')

    //.+self.amethod('delay', 'time')
    return new Promise( resolve => setTimeout(resolve, time) )
    //.-self.amethod

    //.+self.amethod('moonBot', 'data')
    let result = {}
    result.status = 'MOONBOTDONE'
    await this.delay(1000) // artificial delay simulates thinking..
    if (data.cmd == 'play') {
	//result.boneId = await this.firstValidPlay(data.bones)
	result.boneId = await this.bestValidPlay(data)
    }
    else if ((data.cmd == 'draw') || (data.cmd == 'shake')) {
	result.boneId = await this.firstFacedown(data.bones)
    }
    else if (data.cmd == 'draw7') {
	result.boneIds = await this.firstFacedown7(data.bones)
    }
    else if (data.cmd == 'bid') {
	if (data.maxBid == -2) { // stuck bid
	    result.bid = 1 // must bid at least 4
	}
	else {
	    result.bid = 0 // pass
	}
    }
    else if (data.cmd == 'discard') {
	result.boneId = await this.firstValidPlay(data.bones)
    }
    else if (data.cmd == 'call') {
	result.call = 8 // follow me
    }
    else {
	console.log(`moonBot: ${data.cmd} not recognized`)
	result.status = 'MOONBOTERROR'
    }
    //.-self.amethod('result')
    
    //.+self.amethod('playHand', 'room', 'shaker')
    //shaker.socket.emit('yourturn', {cmd:'shake'}, this.ack)
    await this.shakeBones() // just to initialize dominoes
    await this.shake(shaker)
    let leadPlayer = room.next(shaker) // lead player
    let players = room.round(leadPlayer)
    let stats = await this.getStats(players)
    //for (let player of players) {
    for (let player of room.nextPlayer(leadPlayer.idx)) {
	if (this.halt) { break }
	let socketId = player.socket.id
	player.tricks = 0
	let pool = await this.sendBonePool(socketId)
	let data = {cmd:'draw7', bones:pool, stats:stats}
	let result = await this.playerTurn(player, data, 30)
	if (this.replaceSocketMap.has(socketId)) {
	    socketId = this.replaceSocketMap.get(socketId)
	}
	let {boneIds} = result
	for (let boneId of boneIds) {
	    let bone = this.bonepool[boneId]
	    bone.faceup = true
	    bone.owner = socketId
	    //console.log(`Assigned owner ${bone.owner} to ${bone.boneStr}`)
	}
    }
    this._remapSocketId()
    //let caller = await this.biddingRound(room, players)
    //.#self.debug('leadPlayer.idx','2:')
    //.#self.debug('leadPlayer.nickName','2:')
    let caller = await this.biddingRound(room, leadPlayer.idx)
    // Determine remaining bone in kitty
    let kitty = await this.findKitty(caller.socket.id)
    //console.log(caller)
    console.log(`Player ${caller.nickName} won the bid`)
    let callerPool = await this.sendBonePool(caller.socket.id)
    let data = {cmd:'discard', bones:callerPool}
    let result = await this.playerTurn(caller, data, 60)
    let boneId = result.boneId
    console.log(`boneId = ${boneId}`)
    let bone = this.bonepool[boneId]
    bone.discarded = true
    bone.faceup = false
    bone.owner = ''
    this.call = await this.getCall(caller)
    this.io.to(room.name).emit('call', {caller:caller.nickName, call:this.call})
    let leader = caller
    for (let i=0; i<7; i++) {
	if (this.halt) { break }
	leader = await this.trick(room, room.round(leader))
	console.log(`Player ${leader.nickName} wins the trick`)
	console.log(`Player ${leader.nickName} has won ${leader.tricks} tricks`)
    }
    console.log(`Player ${caller.nickName} won ${caller.tricks} tricks and bid ${caller.bid}`)
    // Update score for caller based on if he made his bid
    let minTricks = caller.bid + 3
    if (minTricks > 7) { // MOON
	if (caller.tricks < 7) {
	    caller.score -= 21
	}
	else {
	    caller.score += 21 // Caller took all 7 tricks
	}
    }
    else {
	if (caller.tricks < minTricks) {
	    caller.score -= minTricks
	}
	else {
	    caller.score += caller.tricks
	}
    }
    for (let player of room.nextPlayer(leadPlayer.idx)) {
	player.tricks = 0
	//console.log(`Player ${player.nickName} : ${player.score}`)
    }
    //.-self.amethod(0)

    //.+self.method('haltGame', 'x')
    console.log('Error - haltGame function should be overridden')
    //.-self.method('x')
    
    //.+self.amethod('playMoon', 'room')
    console.log(`Starting MOON game in ${room.name} ..`)
    let shaker = await this.drawForShake(room)
    let shakerIdx = shaker.idx
    console.log(`${shaker.nickName} wins the shake`)
    while (! this.halt) {
	let winner = null
	while ((! winner) && (! this.halt)) {
	    await this.playHand(room, shaker)
	    if (this.halt) { break }
	    // next player shakes
	    shaker = room.nextIdx(shakerIdx)
	    shakerIdx = shaker.idx
	    for (let player of room.round()) {
		if (player.score >= 21) {
		    winner = player
		    console.log(`Player ${player.nickName} wins MOON`)
		    this.io.to(room.name).emit('info', `${player.nickName} wins MOON`) 
		    winner.wins++
		}
	    }
	}
	if (this.halt) { break }
	for (let player of room.round()) {
	    player.bid = 0
	    player.tricks = 0
	    player.score = 0
	}
    }
    //.-self.amethod(0)
    
    //.self > 'body'
}

module.exports = gameServerClass;
//. }

//.}

//.gameServer = gameServerClass('gameServerClass.js', '')
//.gameServer.bone = opovl('bone')
//.gameServer.maxBone = opovl('maxBone')
//.gameServer.minBone = opovl('minBone')

//.-pet
