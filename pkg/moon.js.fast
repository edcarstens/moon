//.#-*-Javascript-*-
//.+fast
FAST Template for moon.js
----------------------------

//.class caseClassOld(object):{
//. def __init__(self, parent, section):{
//.  self.firstCase = True
//.  self.parent = parent
//.  self.section = section
//. }
//. def __call__(self, cond):{
//.  self.cond = cond
//.  return self
//. }
//. def __pos__(self):{
//.  +self.parent < self.section
//.  if (self.firstCase):{
if (@self.cond@) {
//.   self.firstCase = False
//.  }
//.  else:{
else if (@self.cond@) {
//.  }
//.  fast >> 4
//. }
//. def __neg__(self):{
//.  fast << 4
}
//.  -self.parent
//. }
//.}

//.moon = secjs.moon('public/javascripts/moon.js')
//.moon.case = caseClass(moon, 'cmds')
    
//.def addMoon():{
Adding moon ..    
//. +layout.scripts
script(src='javascripts/moon.js')
//. -layout.scripts
//. +index.block_content
//.+fast
/* ----- trick so emacs ignores this section -----
//.-fast
//.for i in range(3):{
button#btnRoom@i@(class="w3-button w3-green w3-border w3-hover-blue w3-text-black w3-card-4 w3-ripple" style='position:absolute; width:200px; height:100px; top:200px; left:100px;') <b>Room @i@</b>
//.}
//.+fast
-- -----------------------------------------------
*/
//.-fast
//. -index.block_content
//. +main.body
console.log('Welcome to MOON')
moon.init(
    //.+moon.initCallArgs
    socket,
    //.-moon.initCallArgs
    //.moon.initCallArgs.chomp > ''
)
moon.start()
//. -main.body
    
//.+moon
class moonClass {
    //.moon.classvars > ''
    //.+moon.c
    (
        player='',
        state=null,
        socket=null,
        roomOfBtn={0:0,1:1,2:2},
        room=null,
    ) {
        this.describeTrump = {
            1: 'aces',
            2: 'ducks',
            3: 'threes',
            4: 'fours',
            5: 'fives',
            6: 'sixes',
            7: 'doubles',
            8: 'follow me' 
        }
        //.moon.c.body > ''
    }
    //.-moon.c

    //.+moon.gotoLogin
    (
    ) {
        $('#btnRoom1').show()
        $('#btnRoom2').show()
        $('#btnRoom3').show()
        $('#inputChatName').show()
        $('#gfx').hide()
        $('#btnSend').hide()
        $('#inputMessage').hide()
        //.moon.gotoLogin.body > ''
    }
    //.-moon.gotoLogin

    //.+moon.init
    (
        socket,
    ) {
        moon.socket = socket
        moon.gotoLogin()
    }
    //.-moon.init

    //.+moon.clickPlay
    a(
    ) {
        let plist = []
        for (let i=0; i<3; i++) {
            plist.push( new Promise( (resolve, reject) => {
                $('#btnRoom' + i).on('click', () => {
                    resolve({player:$("#inputChatName").val(), room:i})
                })
            }) )
        } // for i
    }
    return Promise.race(plist)
    //.-moon.clickPlay

    //.+moon.clickSend
    a(
    ) {
        return new Promise( (resolve, reject) => {
            $('#btnSend').on('click', () => {
                resolve($("#inputMessage").val())
            })
        })
    }
    //.-moon.clickSend

    //.+moon.boneClickedOrBot
    a(
    ) {
        let p1 = new Promise( (resolve, reject) => {
            moon._boneClicked = (boneId) => {
                resolve({boneId, status:'DONE'})
            }
        })
        let p2 = new Promise( resolve => {
            moon.socket.once('moonbot', result => {
                resolve(result)
            })
        })
        return Promise.race([p1,p2])
    }
    //.-moon.boneClickedOrBot

    //.+moon.boneClicked
    a(
    ) {
        let {boneId} = await this.boneClickedOrBot()
        return boneId
    }
    //.-moon.boneClicked

    //.+moon.rxRoom
    a(
    ) {
        return new Promise( (resolve, reject) => {
            moon.socket.once('roomgrant', (data) => {
                resolve(data.roomName)
            })
        })
    }
    //.-moon.rxRoom

    //.+moon.waitForStart
    a(
    ) {
        return new Promise( (resolve, reject) => {
            moon.socket.once('startmoon', (data) => {
                resolve(data.roomName)
            })
        })
    }
    //.-moon.waitForStart

    //.+moon.myTurn
    a(
    ) {
        return new Promise( (resolve, reject) => {
            moon.socket.once('yourturn', (data, ack) => {
                //resolve(data.nickName == moon.player)
                //ack(moon.socket.id, moon.player)
                ack(data)
                resolve(data)
            })
        })
    }
    //.-moon.myTurn

    //.+moon.delay
    a(
        time,
    ) {
        return new Promise( resolve => setTimeout(resolve, time) )
    }
    //.-moon.delay

    //.+moon.start
    a(
    ) {
        let data, bone, boneId
        let done = false
        console.log('Starting MOON...')
        $('#trump').hide()
        $('#suit').hide()
        
        // Need to show active gamerooms with moonbots..
        moon.socket.on('vacancies', data => {
            //console.log('vacancies..')
            //console.log(data.vacancies)
            //console.log(data)
            var rooms = []
            if (moon.room == null) {
                for (let room in data.vacancies) {
                    rooms.push(room)
                }
                //console.log('rooms')
                //console.log(rooms)
                //let room = data[Number(rooms[0])]
                for (let i=0; i<3; i++) {
                    if (rooms.length > i) {
                        let room = data[rooms[i]]
                        //console.log('room')
                        //console.log(room)
                        let players = room.players
                        //console.log(players)
                        let playerNames = []
                        for (player of players) {
                            playerNames.push(moon.limit(player.nickName,7))
                        }
                        //console.log(playerNames)
                        moon.roomOfBtn[i] = i
                        $('#btnRoom' + i).html(`<b>Room_ ${i}: ${playerNames.join('<br>')}</b>`)
                        $('#btnRoom' + i).show()
                    }
                    else { // new room
                        moon.roomOfBtn[i] = -1
                        $('#btnRoom' + i).html(`<b>(New Room)</b>`)
                        $('#btnRoom' + i).show()
                    }
                }
            }
        })

        let x = await moon.clickPlay()
        console.log(`x=${x}`)
        console.log(x)
        moon.player = x.player
        moon.room = moon.roomOfBtn[x.room]
        for(let i=0; i<3; i++) {
            $('#btnRoom' + i).hide()
        }
        $('#inputChatName').hide()
        $('#btnSend').show()
        $('#inputMessage').show()
        console.log(`Hello ${moon.player}`)
        moon.waitForStart().then( (x) => {
            console.log('Moon game starting..')
            $('#message').html('<b>Moon Game Starting..</b>')
            $('#message').show()
            $('#btnPlayWithBots').hide()
        })
        console.log(`You requested room ${moon.room}`)
        moon.socket.emit('roomreq', {player:moon.player, room:moon.room})
        moon.room = await moon.rxRoom()
        console.log(`You get ${moon.room}`)
        $('#message').html('<b>Waiting For Players..</b>')
        $('#message').show()
        //.moon > 'start1'
        moon.socket.on('drewbone', (data) => {
            console.log(`Player ${data.player} drew bone ${data.boneStr}`)
            $('#message').html(`<b>Player ${data.player} drew bone ${data.boneStr}</b>`)
            $('#message').show()
            bones.pool[data.boneId].faceup = true
            bones.pool[data.boneId].boneStr = data.boneStr
            bones.display(false)
        })
        
        moon.socket.on('state', (data) => {
            let player = data.player
            let boneId = data.boneId
            let bone = data.bone
            $('#message').html(`<b>${data.player} played ${bone.boneStr}</b>`)
            $('#message').show()
            //if (socket.id != data.socketId) {
            bones.pool[boneId].faceup = bone.faceup
            bones.pool[boneId].owner = bone.owner
            bones.pool[boneId].trick = bone.trick
            bones.pool[boneId].boneStr = bone.boneStr
            bones.pool[boneId].played = bone.played
            bones.pool[boneId].discarded = bone.discarded
            bones.display(false)
            //}
        })
        
        moon.socket.on('info', (s) => {
            $('#message').html('<b>' + s + '</b>')
        })
        
        moon.socket.on('call', data => {
            //moon.trump = data.call
            let s = moon.describeTrump[data.call]
            $('#message').html(`<b> ${data.caller} called ${s} trump</b>`)
            $('#message').show()
            moon.displayTrump(data.call)
        })
        
        while (! done) {
            data = await moon.myTurn()
            console.log(`My turn to ${data.cmd}`)
            //done = (data.cmd == 'shake')
            $('#suit').hide()
            $('#trump').hide()
            //.moon > 'cmds'
            console.log('done')
        }
        return 0
    }
    //.-moon.start

    //.+moon.limit
    (
        s,
        lim,
    ) {
        let rv = s
        if (s.length > lim) {
            rv = s.slice(0,lim)
        }
        return rv
    }
    //.-moon.limit

    //.+moon.displayStats
    (
        stats,
    ) {
        let s = '<tr>'
        s += '<th>' + 'Name' + '</th>'
        s += '<th>' + 'Wins' + '</th>'
        s += '<th>' + 'Score' + '</th>'
        s += '<th>' + 'Tricks' + '</th>'
        s += '</tr>'
        let socketId
        for (socketId of stats.socketIds) {
            let ps = stats[socketId]
            s += '<tr>'
            s += '<td>' + moon.limit(ps.name, 10)   + '</td>'
            s += '<td>' + ps.wins   + '</td>'
            s += '<td>' + ps.score  + '</td>'
            s += '<td>' + ps.tricks + '</td>'
            s += '</tr>'
        }
        $('#stats').html(s)
        $('#stats').show()
    }
    //.-moon.displayStats

    //.+moon.displaySuit
    (
        maxBone,
    ) {
        let suit, trump
        if (maxBone) {
            suit = maxBone.suit
            trump = maxBone.trump
            if (trump == 7) {
                trump = 'DOUBLES'
            }
            if (suit == 7) {
                suit = 'DOUBLES'
            }
            if ((suit == trump) && (suit != 'DOUBLES')) {
                suit += ' (TRUMP)'
            }
        }
        else {
            suit = '-'
        }
        let s = '<b> SUIT: ' + suit + ' </b>'
        $('#suit').html(s)
        $('#suit').show()
    }
    //.-moon.displaySuit

    //.+moon.displayTrump
    (
        trump,
    ) {
        let trumpStr
        if (trump == 7) {
            trumpStr = 'TRUMP: DOUBLES'
        }
        else if (trump >= 8) {
            trumpStr = 'FOLLOW ME'
        }
        else if (trump >= 1) {
            trumpStr = 'TRUMP: ' + trump
        }
        else {
            trumpStr = '-'
        }
        $('#trump').html('<b> ' + trumpStr + ' </b>')
        $('#trump').show()
    }
    //.-moon.displayTrump
    
    //.moon > 'body'

}

module.exports = moonClass

//.-moon

//.} # def addMoon

//.-fast
